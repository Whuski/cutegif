{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","neko","require","randoms","sfw","kiss","hug","pat","meow","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","image","margin","App","classes","useState","logo","nekoUrl","setNekoUrl","isCopied","setCopied","textAreaRef","useRef","randomImg","value","a","cute","url","copyText","e","console","log","current","select","document","execCommand","className","Container","maxWidth","Grid","container","item","xs","Button","variant","onClick","id","src","alt","ref","readOnly","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,sSCQrCC,EAAO,IADEC,EAAQ,KAEjBC,EAAU,CACd,KAAQF,EAAKG,IAAIC,KACjB,IAAOJ,EAAKG,IAAIE,IAChB,IAAOL,EAAKG,IAAIG,IAChB,KAAQN,EAAKG,IAAII,MAGbC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,WAE5BC,MAAO,CACLL,UAAW,SACXM,OAAQ,WAmEGC,MA9Df,WACE,IAAMC,EAAUhB,IADH,EAEiBiB,mBAASC,KAF1B,mBAENC,EAFM,KAEGC,EAFH,OAGiBH,oBAAS,GAH1B,mBAGNI,EAHM,KAGIC,EAHJ,KAKPC,EAAcC,iBAAO,MACrBC,EAAS,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACCjC,EAAQgC,KADT,OACZE,EADY,OAEhBR,EAAWQ,EAAKC,KAChBC,IAHgB,2CAAH,sDAMTA,EAAW,SAACC,GAChBC,QAAQC,IAAI,uBACZV,EAAYW,QAAQC,SACpBC,SAASC,YAAY,QACrBf,GAAU,IAGZ,OACE,yBAAKgB,UAAWtB,EAAQb,MACtB,kBAACoC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACnC,QAAS,GACvB,kBAACkC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMtB,EAAU,SAArD,eAEF,kBAACgB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMtB,EAAU,UAArD,gBAEF,kBAACgB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMtB,EAAU,SAArD,eAEF,kBAACgB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMtB,EAAU,UAArD,iBAGJ,yBAAKuB,GAAG,QAAQV,UAAWtB,EAAQH,OACjC,yBAAKoC,IAAK9B,EAAS+B,IAAI,qBAEzB,yBAAKF,GAAG,OACN,8BAAUtB,MAAOP,EAASgC,IAAK5B,EAAa6B,UAAQ,IACpD,2BAAI/B,EAAW,6BAA+B,KAEhD,6BACE,6FAAkE,uBAAGgC,KAAK,sBAAR,cAAlE,aACA,4KACA,+FClEUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAAS0B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.fc05311b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useRef} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {Button, Container} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst client = require('nekos.life');\r\nconst neko = new client();\r\nconst randoms = {\r\n  \"kiss\": neko.sfw.kiss,\r\n  \"hug\": neko.sfw.hug,\r\n  \"pat\": neko.sfw.pat,\r\n  \"meow\": neko.sfw.meow,\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  image: {\r\n    textAlign: 'center',\r\n    margin: '2em'\r\n  }\r\n}));\r\n\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [nekoUrl, setNekoUrl] = useState(logo);\r\n  const [isCopied, setCopied] = useState(false);\r\n\r\n  const textAreaRef = useRef(null);\r\n  const randomImg = async (value) => {\r\n    let cute = await randoms[value]()\r\n    setNekoUrl(cute.url);\r\n    copyText();\r\n  }\r\n\r\n  const copyText = (e) => {\r\n    console.log(\"Copy text triggered\");\r\n    textAreaRef.current.select();\r\n    document.execCommand(\"copy\");\r\n    setCopied(true);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Container maxWidth=\"sm\">\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={3}>\r\n            <Button variant=\"contained\" onClick={() => randomImg(\"hug\")}>Random hug</Button>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Button variant=\"contained\" onClick={() => randomImg(\"kiss\")}>Random kiss</Button>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Button variant=\"contained\" onClick={() => randomImg(\"pat\")}>Random pat</Button>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Button variant=\"contained\" onClick={() => randomImg(\"meow\")}>Random meow</Button>\r\n          </Grid>\r\n        </Grid>\r\n        <div id=\"image\" className={classes.image}>\r\n          <img src={nekoUrl} alt=\"random cute gif\"/>\r\n        </div>\r\n        <div id=\"url\">  \r\n          <textarea value={nekoUrl} ref={textAreaRef} readOnly/>\r\n          <p>{isCopied ? \"URL COPIED TO UR CLIPBOARD\" : \"\"}</p>\r\n        </div>\r\n        <div>\r\n          <p>This website was made possible thanks to the mega cool guys at <a href=\"https://nekos.life\">nekos.life</a> ! ‚ù§</p>\r\n          <p>Do not base anything over this really badly made website, I'm using it to learn a bunch of javascript framework and mostly made it for myself</p>\r\n          <p>Please do not beat me up for this code, I know it's not good</p>\r\n        </div>\r\n\r\n      </Container>\r\n      \r\n      </div>        \r\n        \r\n        \r\n        \r\n      \r\n\r\n      \r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}