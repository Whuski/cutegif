{"version":3,"sources":["logo.svg","strings.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","strings","neko","require","randoms","sfw","kiss","hug","pat","meow","cuddle","App","useState","logo","nekoUrl","setNekoUrl","isCopied","setCopied","bottomText","setBottom","textAreaRef","useRef","randomImg","value","a","cute","url","copyText","e","console","log","current","select","document","execCommand","owoify","fetch","eng","res","json","owo","Container","className","Row","Col","md","Button","variant","onClick","Image","src","ref","Alert","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,0PCI5BC,G,MAJC,CACZ,WAAa,wI,gDCaXC,EAAO,IADEC,EAAQ,KAEjBC,EAAU,CACd,KAAQF,EAAKG,IAAIC,KACjB,IAAOJ,EAAKG,IAAIE,IAChB,IAAOL,EAAKG,IAAIG,IAChB,KAAQN,EAAKG,IAAII,KACjB,OAAUP,EAAKG,IAAIK,QAmENC,MA/Df,WAAgB,IAAD,EACiBC,mBAASC,KAD1B,mBACNC,EADM,KACGC,EADH,OAEiBH,oBAAS,GAF1B,mBAENI,EAFM,KAEIC,EAFJ,OAGmBL,mBAASX,EAAQiB,YAHpC,mBAGNA,EAHM,KAGMC,EAHN,KAKPC,EAAcC,iBAAO,MACrBC,EAAS,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACCpB,EAAQmB,KADT,OACZE,EADY,OAEhBV,EAAWU,EAAKC,KAChBC,IAHgB,2CAAH,sDAMTA,EAAW,SAACC,GAChBC,QAAQC,IAAI,uBACZV,EAAYW,QAAQC,SACpBC,SAASC,YAAY,QACrBjB,GAAU,IAGNkB,EAAM,uCAAG,WAAOP,GAAP,eAAAJ,EAAA,sEACGY,MAAM,yCAA2CnC,EAAQoC,IAAInB,YADhE,cACToB,EADS,gBAEDA,EAAIC,OAFH,OAEbD,EAFa,OAGbnB,EAAUmB,EAAIE,KAHD,2CAAH,sDAMZ,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,OACnB,kBAACC,EAAA,EAAD,CAAKD,UAAU,6BACb,wBAAIA,UAAU,UAAd,uBAGF,kBAACC,EAAA,EAAD,CAAKD,UAAU,kCACb,kBAACE,EAAA,EAAD,CAAKC,GAAG,QAAO,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAM1B,EAAU,SAAnD,gBACf,kBAACsB,EAAA,EAAD,CAAKC,GAAG,QAAO,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAM1B,EAAU,SAAnD,eACf,kBAACsB,EAAA,EAAD,CAAKC,GAAG,QAAO,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAM1B,EAAU,UAAnD,gBACf,kBAACsB,EAAA,EAAD,CAAKC,GAAG,QAAO,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAM1B,EAAU,UAAnD,gBACf,kBAACsB,EAAA,EAAD,CAAKC,GAAG,QAAO,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAM1B,EAAU,YAAnD,mBAGjB,kBAACqB,EAAA,EAAD,CAAKD,UAAU,kCACb,kBAACO,EAAA,EAAD,CAAOC,IAAKpC,KAEd,kBAAC6B,EAAA,EAAD,CAAKD,UAAU,kCACb,8BAAUS,IAAK/B,EAAaG,MAAOT,KAErC,kBAAC6B,EAAA,EAAD,CAAKD,UAAU,6BAEX1B,EAAW,kBAACoC,EAAA,EAAD,CAAOL,QAAQ,WAAf,iCAAiE,IAGhF,kBAACJ,EAAA,EAAD,KACE,2IAAgH,uBAAGU,KAAK,cAAR,cAAhH,iBACA,2BACGnC,IAGL,kBAACyB,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,CAAQE,QAASb,GAAjB,UCrEYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAAS6B,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.ee8a2a1c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const strings = {\n    \"bottomText\": `Please don't use the code as a base for anything. It is not well done. Also don't beat me up if you read it. Please ðŸ¥º !!`\n}\n\nexport default strings;","import React, {useState, useRef} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport strings from './strings';\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  Image, Alert\n} from 'react-bootstrap';\n\n\nconst client = require('nekos.life');\nconst neko = new client();\nconst randoms = {\n  \"kiss\": neko.sfw.kiss,\n  \"hug\": neko.sfw.hug,\n  \"pat\": neko.sfw.pat,\n  \"meow\": neko.sfw.meow,\n  \"cuddle\": neko.sfw.cuddle,\n}\n\n\nfunction App() {\n  const [nekoUrl, setNekoUrl] = useState(logo);\n  const [isCopied, setCopied] = useState(false);\n  const [bottomText, setBottom] = useState(strings.bottomText);\n\n  const textAreaRef = useRef(null);\n  const randomImg = async (value) => {\n    let cute = await randoms[value]()\n    setNekoUrl(cute.url);\n    copyText();\n  }\n\n  const copyText = (e) => {\n    console.log(\"Copy text triggered\");\n    textAreaRef.current.select();\n    document.execCommand(\"copy\");\n    setCopied(true);\n  }\n  \n  const owoify = async (e) => {\n    let res = await fetch(\"https://nekos.life/api/v2/owoify?text=\" + strings.eng.bottomText);\n    res = await res.json();\n    setBottom(res.owo);\n  }\n\n  return (\n    <Container className=\"p-3\">\n      <Row className=\"justify-content-md-center\">\n        <h1 className=\"header\">Welcome to CuteGif</h1>\n      </Row>\n      \n      <Row className=\"justify-content-md-center mb-5\">\n        <Col md=\"auto\"><Button variant=\"primary\" onClick={() => randomImg(\"hug\")}>RANDOM HUGS</Button></Col>\n        <Col md=\"auto\"><Button variant=\"primary\" onClick={() => randomImg(\"pat\")}>RANDOM PAT</Button></Col>\n        <Col md=\"auto\"><Button variant=\"primary\" onClick={() => randomImg(\"kiss\")}>RANDOM KISS</Button></Col>\n        <Col md=\"auto\"><Button variant=\"primary\" onClick={() => randomImg(\"meow\")}>RANDOM MEOW</Button></Col>\n        <Col md=\"auto\"><Button variant=\"primary\" onClick={() => randomImg(\"cuddle\")}>RANDOM CUDDLE</Button></Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center mb-5\">\n        <Image src={nekoUrl} />\n      </Row>\n      <Row className=\"justify-content-md-center mb-5\">\n        <textarea ref={textAreaRef} value={nekoUrl}></textarea>\n      </Row>\n      <Row className=\"justify-content-md-center\">\n        {\n          isCopied ? <Alert variant=\"success\">Url is copied to ur clipboard</Alert> : \"\"\n        }\n      </Row>\n      <Row>\n        <p>This website was made possible because there's some really nice people who made a website with an api called <a href=\"nekos.life\">nekos.life</a> ðŸ§¡</p>\n        <p>\n          {bottomText}\n        </p>\n      </Row>\n      <Row>\n        <Button onClick={owoify}>OWO</Button>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}